<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MvvmValidation</name>
    </assembly>
    <members>
        <member name="T:MvvmValidation.IAsyncValidationRule">
            <summary>
            Represents an asynchronous validation rule.
            </summary>
        </member>
        <member name="M:MvvmValidation.Internal.Guard.NotNull``1(``0,System.String,System.String,System.String,System.Int32)">
            <summary>
                Ensures that the given value is a non-null value.
            </summary>
            <param name="value">Value to check.</param>
            <param name="paramName">The argument name.</param>
            <param name="callerMemberName">To be populated by the compiler.</param>
            <param name="callerFilePath">To be populated by the compiler.</param>
            <param name="callerLineNumber">To be populated by the compiler.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="value" /> is a null value.
            </exception>
        </member>
        <member name="M:MvvmValidation.Internal.Guard.NotNullOrEmpty(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
                Ensures that the given value is not null
                or an empty string.
            </summary>
            <param name="value">The value to check.</param>
            <param name="argumentName">The name of the argument that is being checked.</param>
            <param name="callerMemberName">To be populated by the compiler.</param>
            <param name="callerFilePath">To be populated by the compiler.</param>
            <param name="callerLineNumber">To be populated by the compiler.</param>
            <exception cref="T:System.ArgumentNullException">Value is a null value.</exception>
            <exception cref="T:System.ArgumentException">Value is an empty string value.</exception>
        </member>
        <member name="M:MvvmValidation.Internal.Guard.Assert(System.Boolean,System.String,System.String,System.String,System.Int32)">
            <summary>
                Asserts the specified condition.
            </summary>
            <param name="condition">The condition to assert.</param>
            <param name="message">The message to show when the assertion fails.</param>
            <param name="callerMemberName">To be populated by the compiler.</param>
            <param name="callerFilePath">To be populated by the compiler.</param>
            <param name="callerLineNumber">To be populated by the compiler.</param>
        </member>
        <member name="T:MvvmValidation.Internal.PropertyName">
            <summary>
            Gets property name using lambda expressions.
            </summary>
        </member>
        <member name="M:MvvmValidation.Internal.PropertyName.For``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Boolean)">
            <summary>
            Returns the property name by given expression.
            </summary>
            <typeparam name="T">Type of property's return value</typeparam>
            <param name="expression">The expression.</param>
            <param name="compound"><c>True</c> if the full expression path should be used to build the string. For example, 
            call PropertyName.For(() => MyObj.Property.NestedProperty) will result in string "MyObj.Property.NestedProperty".
            If <c>False</c> it will return only the last part, which is "NestedProperty" in the example above.</param>
        </member>
        <member name="M:MvvmValidation.Internal.PropertyName.For(System.Linq.Expressions.Expression{System.Func{System.Object}},System.Boolean)">
            <summary>
            Returns the property name by given expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="compound"><c>True</c> if the full expression path should be used to build the string. For example, 
            call PropertyName.For(() => MyObj.Property.NestedProperty) will result in string "MyObj.Property.NestedProperty".
            If <c>False</c> it will return only the last part, which is "NestedProperty" in the example above.</param>
        </member>
        <member name="M:MvvmValidation.Internal.PropertyName.GetMemberName(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            Gets the member name by give expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="compound"><c>True</c> if the full expression path should be used to build the string. For example, 
            call GetMemberName(() => MyObj.Property.NestedProperty) will result in string "MyObj.Property.NestedProperty".
            If <c>False</c> it will return only the last part, which is "NestedProperty" in the example above.</param>
        </member>
        <member name="T:MvvmValidation.IValidatable">
            <summary>
            Represents an object that can be validated.
            </summary>
        </member>
        <member name="M:MvvmValidation.IValidatable.Validate">
            <summary>
            Validates the object asyncrhonously.
            </summary>
            <returns>Task that represents the validation operation.</returns>
        </member>
        <member name="T:MvvmValidation.IValidationResultFormatter">
            <summary>
            Represents a formatter that can be used to format an instance of <see cref="T:MvvmValidation.ValidationResult"/> to a string.
            </summary>
        </member>
        <member name="M:MvvmValidation.IValidationResultFormatter.Format(MvvmValidation.ValidationResult)">
            <summary>
            Converts the specified validation result object to a string.
            </summary>
            <param name="validationResult">The validation result to format.</param>
            <returns>A string representation of <paramref name="validationResult"/></returns>
        </member>
        <member name="T:MvvmValidation.IValidationRule">
            <summary>
            Represents a validation rule.
            </summary>
        </member>
        <member name="M:MvvmValidation.IValidationRule.WithSettings(System.Action{MvvmValidation.ValidationRuleSettings})">
            <summary>
            Allows changing the rule settings. 
            </summary>
            <param name="setSettingsDelegate">A function that accepts an instance of <see cref="T:MvvmValidation.ValidationRuleSettings"/> that contains settings for this rule.</param>
            <returns>The same fule instance (allows for "fluent" interface with chained calls).</returns>
        </member>
        <member name="T:MvvmValidation.NotifyDataErrorInfoAdapter">
            <summary>
            Adapts an instance of <see cref="T:MvvmValidation.ValidationHelper"/> to the <see cref="T:System.ComponentModel.INotifyDataErrorInfo"/> interface.
            </summary>
        </member>
        <member name="M:MvvmValidation.NotifyDataErrorInfoAdapter.#ctor(MvvmValidation.ValidationHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmValidation.NotifyDataErrorInfoAdapter"/> class.
            </summary>
            <param name="validator">The adaptee.</param>
        </member>
        <member name="M:MvvmValidation.NotifyDataErrorInfoAdapter.#ctor(MvvmValidation.ValidationHelper,System.Threading.SynchronizationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmValidation.NotifyDataErrorInfoAdapter"/> class.
            </summary>
            <param name="validator">The adaptee.</param>
            <param name="errorsChangedNotificationContext">Synchronization context that should be used to raise the <see cref="E:MvvmValidation.NotifyDataErrorInfoAdapter.ErrorsChanged"/> event on.</param>
        </member>
        <member name="M:MvvmValidation.NotifyDataErrorInfoAdapter.GetErrors(System.String)">
            <summary>
            Gets the validation errors for a specified property or for the entire object.
            </summary>
            <param name="propertyName">The name of the property to retrieve validation errors for, or null or <see cref="F:System.String.Empty"/> to retrieve errors for the entire object.</param>
            <returns>
            The validation errors for the property or object.
            </returns>
        </member>
        <member name="P:MvvmValidation.NotifyDataErrorInfoAdapter.HasErrors">
            <summary>
            Gets a value that indicates whether the object has validation errors.
            </summary>
            <returns>true if the object currently has validation errors; otherwise, false.</returns>
        </member>
        <member name="E:MvvmValidation.NotifyDataErrorInfoAdapter.ErrorsChanged">
            <summary>
            Occurs when the validation errors have changed for a property or for the entire object.
            </summary>
        </member>
        <member name="T:MvvmValidation.NumberedListValidationResultFormatter">
            <summary>
            An implementation of <see cref="T:MvvmValidation.IValidationResultFormatter"/> that formats the validation result as 
            a numbered list of errors or an empty string if valid.
            </summary>
        </member>
        <member name="M:MvvmValidation.NumberedListValidationResultFormatter.Format(MvvmValidation.ValidationResult)">
            <summary>
            Converts the specified validation result object to a string.
            </summary>
            <param name="validationResult">The validation result to format.</param>
            <returns>
            A string representation of <paramref name="validationResult"/>
            </returns>
        </member>
        <member name="T:MvvmValidation.RuleResult">
            <summary>
            Represents the outcome of a validation rule when executed.
            </summary>
        </member>
        <member name="M:MvvmValidation.RuleResult.Invalid(System.String)">
            <summary>
            Creates an "Invalid" result with the given error <paramref name="error"/>.
            </summary>
            <param name="error">The error text that describes why this rule is invalid.</param>
            <returns>An instance of <see cref="T:MvvmValidation.RuleResult"/> that represents an invalid result.</returns>
        </member>
        <member name="M:MvvmValidation.RuleResult.Valid">
            <summary>
            Creates a "Valid" result.
            </summary>
            <returns>An instance of <see cref="T:MvvmValidation.RuleResult"/> that represents a valid outcome of the rule.</returns>
        </member>
        <member name="M:MvvmValidation.RuleResult.Assert(System.Boolean,System.String)">
            <summary>
            Asserts the specified condition and if <c>false</c> then creates and invalid result with the given <paramref name="errorMessage"/>. 
            If <c>true</c>, returns a valid result.
            </summary>
            <param name="condition">The assertion.</param>
            <param name="errorMessage">The error message in case if the <paramref name="condition"/> is not <c>true</c>.</param>
            <returns>An instance of <see cref="T:MvvmValidation.RuleResult"/> that represents the result of the assertion.</returns>
        </member>
        <member name="M:MvvmValidation.RuleResult.#ctor">
            <summary>
            Creates an empty (valid) instance of <see cref="T:MvvmValidation.RuleResult"/>. 
            The <see cref="M:MvvmValidation.RuleResult.AddError(System.String)"/> method can be used to add errors to the result later.
            </summary>
        </member>
        <member name="P:MvvmValidation.RuleResult.IsValid">
            <summary>
            Gets a value indicating whether the validation rule passed (valid).
            </summary>
        </member>
        <member name="P:MvvmValidation.RuleResult.Errors">
            <summary>
            Gets the error messages in case if the target is invalid according to this validation rule.
            </summary>
        </member>
        <member name="M:MvvmValidation.RuleResult.AddError(System.String)">
            <summary>
            Adds an error to the result.
            </summary>
            <param name="error">The error message to add.</param>
        </member>
        <member name="M:MvvmValidation.RuleResult.Equals(MvvmValidation.RuleResult)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:MvvmValidation.RuleResult.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MvvmValidation.RuleResult.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:MvvmValidation.RuleResultExtensions">
            <summary>
            Contains helper extension methods for working with <see cref="T:MvvmValidation.RuleResult"/>.
            </summary>
        </member>
        <member name="M:MvvmValidation.RuleResultExtensions.Combine(MvvmValidation.RuleResult,MvvmValidation.RuleResult)">
            <summary>
            Merges <paramref name="firstRuleResult"/> with given <paramref name="secondRuleResult"/> and returns a new instance of <see cref="T:MvvmValidation.ValidationResult"/>
            that represents the merged result (the result that contains errors from both results whithout duplicates).
            </summary>
            <param name="firstRuleResult">The first validation result to merge.</param>
            <param name="secondRuleResult">The second validation result to merge.</param>
            <returns>A new instance of <see cref="T:MvvmValidation.RuleResult"/> that represents the merged result (the result that contains errors from both results whithout duplicates).</returns>
        </member>
        <member name="T:MvvmValidation.ValidationError">
            <summary>
            Represents a validation error.
            </summary>
        </member>
        <member name="P:MvvmValidation.ValidationError.ErrorText">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="P:MvvmValidation.ValidationError.Target">
            <summary>
            Gets the target of the error (a property name or any other arbitrary object).
            </summary>
        </member>
        <member name="M:MvvmValidation.ValidationError.Equals(MvvmValidation.ValidationError)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:MvvmValidation.ValidationError.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MvvmValidation.ValidationError.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:MvvmValidation.ValidationError.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MvvmValidation.ValidationError.op_Implicit(MvvmValidation.ValidationError)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:MvvmValidation.ValidationError"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="error">The error.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:MvvmValidation.ValidationErrorCollection">
            <summary>
            Represents a collection of <see cref="T:MvvmValidation.ValidationError"/> instances.
            </summary>
        </member>
        <member name="T:MvvmValidation.ValidationException">
            <summary>
            Represents an exception that occurs during validation
            </summary>
        </member>
        <member name="M:MvvmValidation.ValidationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmValidation.ValidationException"/> class.
            </summary>
        </member>
        <member name="M:MvvmValidation.ValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmValidation.ValidationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:MvvmValidation.ValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmValidation.ValidationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:MvvmValidation.ValidationHelper">
            <summary>
            Main helper class that contains the functionality of managing validation rules, 
            executing validation using those rules and keeping validation results.
            </summary>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmValidation.ValidationHelper"/> class.
            </summary>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.#ctor(MvvmValidation.ValidationSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmValidation.ValidationHelper"/> class.
            </summary>
            <param name="settings">An instance of <see cref="T:MvvmValidation.ValidationSettings"/> that control the behavior of this instance of <see cref="T:MvvmValidation.ValidationHelper"/>.</param>
        </member>
        <member name="P:MvvmValidation.ValidationHelper.IsValidationSuspended">
            <summary>
            Indicates whether the validation is currently suspended using the <see cref="M:MvvmValidation.ValidationHelper.SuppressValidation"/> method.
            </summary>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddRule(System.Object,System.Func{MvvmValidation.RuleResult})">
            <summary>
            Adds a validation rule that validates the <paramref name="target"/> object.
            </summary>
            <param name="target">The validation target (object that is being validated by <paramref name="validateDelegate"/>).</param>
            <param name="validateDelegate">
            The validation delegate - a function that returns an instance 
            of <see cref="T:MvvmValidation.RuleResult"/> that indicated whether the rule has passed and 
            a collection of errors (in not passed).
            </param>
            <returns>An instance of <see cref="T:MvvmValidation.IValidationRule"/> that represents the newly created validation rule.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddRule(System.Func{MvvmValidation.RuleResult})">
            <summary>
            Adds a simple validation rule.
            </summary>
            <param name="validateDelegate">
            The validation delegate - a function that returns an instance 
            of <see cref="T:MvvmValidation.RuleResult"/> that indicated whether the rule has passed and 
            a collection of errors (in not passed).
            </param>
            <returns>An instance of <see cref="T:MvvmValidation.IValidationRule"/> that represents the newly created validation rule.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddRule(System.String,System.Func{MvvmValidation.RuleResult})">
            <summary>
            Adds a validation rule that validates a property of an object. The target property is specified in the <paramref name="targetName"/> parameter.
            </summary>
            <param name="targetName">The target property name. Example: AddRule(nameof(MyProperty), ...).</param>
            <param name="validateDelegate">
            The validation delegate - a function that returns an instance 
            of <see cref="T:MvvmValidation.RuleResult"/> that indicated whether the rule has passed and 
            a collection of errors (in not passed).
            </param>
            <example>
            <code>
            AddRule(() => Foo, , () => RuleResult.Assert(Foo > 10, "Foo must be greater than 10"))
            </code>
            </example>
            <returns>An instance of <see cref="T:MvvmValidation.IValidationRule"/> that represents the newly created validation rule.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddRule(System.Linq.Expressions.Expression{System.Func{System.Object}},System.Func{MvvmValidation.RuleResult})">
            <summary>
            OBSOLTE: If you are using C# 6 compiler consider using another overload of this method that 
            takes a <see cref="T:System.String"/> argument (<see cref="M:MvvmValidation.ValidationHelper.AddRule(System.String,System.Func{MvvmValidation.RuleResult})"/>) 
            and invoke it with nameof(MyProperty) instead. 
            </summary>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddRule(System.String,System.String,System.Func{MvvmValidation.RuleResult})">
            <summary>
            Adds a validation rule that validates two dependent properties.
            </summary>
            <param name="property1Name">The first target property name. Example: AddRule(nameof(MyProperty), ...).</param>
            <param name="property2Name">The second target property name. Example: AddRule(..., nameof(MyProperty), ...).</param>
            <param name="validateDelegate">
            The validation delegate - a function that returns an instance 
            of <see cref="T:MvvmValidation.RuleResult"/> that indicated whether the rule has passed and 
            a collection of errors (in not passed).
            </param>
            <example>
            <code>
            AddRule(() => Foo, () => Bar, () => RuleResult.Assert(Foo > Bar, "Foo must be greater than bar"))
            </code>
            </example>
            <returns>An instance of <see cref="T:MvvmValidation.IValidationRule"/> that represents the newly created validation rule.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddRule(System.Linq.Expressions.Expression{System.Func{System.Object}},System.Linq.Expressions.Expression{System.Func{System.Object}},System.Func{MvvmValidation.RuleResult})">
            <summary>
            OBSOLTE: If you are using C# 6 compiler consider using another overload of this method that 
            takes a <see cref="T:System.String"/> arguments (<see cref="M:MvvmValidation.ValidationHelper.AddRule(System.String,System.String,System.Func{MvvmValidation.RuleResult})"/>) 
            and invoke it with nameof(MyProperty) instead. 
            </summary>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddRule(System.Collections.Generic.IEnumerable{System.String},System.Func{MvvmValidation.RuleResult})">
            <summary>
            Adds a validation rule that validates a collection of dependent properties.
            </summary>
            <param name="properties">The collection of target property expressions. Example: AddRule(new [] { () => MyProperty1, () => MyProperty2, () => MyProperty3 }, ...).</param>
            <param name="validateDelegate">
            The validation delegate - a function that returns an instance 
            of <see cref="T:MvvmValidation.RuleResult"/> that indicated whether the rule has passed and 
            a collection of errors (in not passed).
            </param>
            <returns>An instance of <see cref="T:MvvmValidation.IValidationRule"/> that represents the newly created validation rule.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddRule(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{System.Object}}},System.Func{MvvmValidation.RuleResult})">
            <summary>
            OBSOLTE: If you are using C# 6 compiler consider using another overload of this method that 
            takes a collection of <see cref="T:System.String"/> (<see cref="M:MvvmValidation.ValidationHelper.AddRule(System.Collections.Generic.IEnumerable{System.String},System.Func{MvvmValidation.RuleResult})"/>) 
            and invoke it with nameof(MyProperty) instead. 
            </summary>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddAsyncRule(System.Object,System.Func{System.Threading.Tasks.Task{MvvmValidation.RuleResult}})">
            <summary>
            Adds an asynchronious validation rule that validates the <paramref name="target"/> object.
            </summary>
            <param name="target">The validation target (object that is being validated by <paramref name="validateAction"/>).</param>
            <param name="validateAction">The validation delegate - a function that performs asyncrhonious validation.</param>
            <returns>An instance of <see cref="T:MvvmValidation.IAsyncValidationRule"/> that represents the newly created validation rule.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddAsyncRule(System.Func{System.Threading.Tasks.Task{MvvmValidation.RuleResult}})">
            <summary>
            Adds an asynchronious validation rule.
            </summary>
            <param name="validateAction">The validation delegate - a function that performs asyncrhonious validation.</param>
            <returns>An instance of <see cref="T:MvvmValidation.IAsyncValidationRule"/> that represents the newly created validation rule.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddAsyncRule(System.String,System.Func{System.Threading.Tasks.Task{MvvmValidation.RuleResult}})">
            <summary>
            Adds an asynchronious validation rule that validates a property of an object. The target property is specified in the <paramref name="propertyName"/> parameter.
            </summary>
            <param name="propertyName">The target property name. Example: AddAsyncRule(nameof(MyProperty), ...).</param>
            <param name="validateAction">The validation delegate - a function that performs asyncrhonious validation.</param>
            <example>
            <code>
            AddRule(() => Foo, 
                    () => 
                    {
                        return ValidationServiceFacade.ValidateFooAsync(Foo)
                            .ContinueWith(t => return RuleResult.Assert(t.Result.IsValid, "Foo must be greater than 10"));
                    })
            </code>
            </example>
            <returns>An instance of <see cref="T:MvvmValidation.IAsyncValidationRule"/> that represents the newly created validation rule.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddAsyncRule(System.Linq.Expressions.Expression{System.Func{System.Object}},System.Func{System.Threading.Tasks.Task{MvvmValidation.RuleResult}})">
            <summary>
            OBSOLTE: If you are using C# 6 compiler consider using another overload of this method that 
            takes a <see cref="T:System.String"/> argument (<see cref="M:MvvmValidation.ValidationHelper.AddAsyncRule(System.String,System.Func{System.Threading.Tasks.Task{MvvmValidation.RuleResult}})"/>) 
            and invoke it with nameof(MyProperty) instead. 
            </summary>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddAsyncRule(System.String,System.String,System.Func{System.Threading.Tasks.Task{MvvmValidation.RuleResult}})">
            <summary>
            Adds an asynchronious validation rule that validates two dependent properties.
            </summary>
            <param name="property1Name">The first target property name. Example: AddRule(nameof(MyProperty), ...).</param>
            <param name="property2Name">The second target property name. Example: AddRule(..., nameof(MyProperty), ...).</param>
            <param name="validateAction">The validation delegate - a function that performs asyncrhonious validation.</param>
            <example>
            <code>
            AddRule(() => Foo, () => Bar
                       () => 
                    {
                           return ValidationServiceFacade.ValidateFooAndBar(Foo, Bar)
                                  .ContinueWith(t => RuleResult.Assert(t.Result.IsValid, "Foo must be greater than 10"));
                       })
            </code>
            </example>
            <returns>An instance of <see cref="T:MvvmValidation.IAsyncValidationRule"/> that represents the newly created validation rule.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddAsyncRule(System.Linq.Expressions.Expression{System.Func{System.Object}},System.Linq.Expressions.Expression{System.Func{System.Object}},System.Func{System.Threading.Tasks.Task{MvvmValidation.RuleResult}})">
            <summary>
            OBSOLTE: If you are using C# 6 compiler consider using another overload of this method that 
            takes <see cref="T:System.String"/> arguments (<see cref="M:MvvmValidation.ValidationHelper.AddAsyncRule(System.String,System.String,System.Func{System.Threading.Tasks.Task{MvvmValidation.RuleResult}})"/>) 
            and invoke it with nameof(MyProperty) instead. 
            </summary>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddAsyncRule(System.Collections.Generic.IEnumerable{System.String},System.Func{System.Threading.Tasks.Task{MvvmValidation.RuleResult}})">
            <summary>
            Adds an asynchronious validation rule that validates a collection of dependent properties.
            </summary>
            <param name="properties">The collection of target property names. Example: AddAsyncRule(new [] { nameof(MyProperty1), nameof(MyProperty2), nameof(MyProperty3) }, ...).</param>
            <param name="validateAction">The validation delegate - a function that performs asyncrhonious validation.</param>
            <returns>An instance of <see cref="T:MvvmValidation.IAsyncValidationRule"/> that represents the newly created validation rule.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddAsyncRule(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{System.Object}}},System.Func{System.Threading.Tasks.Task{MvvmValidation.RuleResult}})">
            <summary>
            OBSOLTE: If you are using C# 6 compiler consider using another overload of this method that 
            takes a collection of <see cref="T:System.String"/> (<see cref="M:MvvmValidation.ValidationHelper.AddAsyncRule(System.Collections.Generic.IEnumerable{System.String},System.Func{System.Threading.Tasks.Task{MvvmValidation.RuleResult}})"/>) 
            and invoke it with nameof(MyProperty) instead. 
            </summary>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.RemoveRule(MvvmValidation.IValidationRule)">
            <summary>
            Removes the specified <paramref name="rule"/>.
            </summary>
            <param name="rule">Validation rule instance.</param>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.RemoveAllRules">
            <summary>
            Removes all validation rules.
            </summary>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.GetResult">
            <summary>
            Returns the current validation state (all errors tracked by this instance of <see cref="T:MvvmValidation.ValidationHelper"/>).
            </summary>
            <returns>An instance of <see cref="T:MvvmValidation.ValidationResult"/> that contains an indication whether the object is valid and a collection of errors if not.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.GetResult(System.Object)">
            <summary>
            Returns the current validation state for the given <paramref name="target"/> (all errors tracked by this instance of <see cref="T:MvvmValidation.ValidationHelper"/>).
            </summary>
            <param name="target">The validation target for which to retrieve the validation state.</param>
            <returns>An instance of <see cref="T:MvvmValidation.ValidationResult"/> that contains an indication whether the object is valid and a collection of errors if not.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.GetResult(System.String)">
            <summary>
            Returns the current validation state for a property represented by <paramref name="targetName"/> (all errors tracked by this instance of <see cref="T:MvvmValidation.ValidationHelper"/>).
            </summary>
            <param name="targetName">The property for which to retrieve the validation state. Example: GetResult(() => MyProperty)</param>
            <returns>An instance of <see cref="T:MvvmValidation.ValidationResult"/> that contains an indication whether the object is valid and a collection of errors if not.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.GetResult(System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            OBSOLTE: If you are using C# 6 compiler consider using another overload of this method that 
            takes a <see cref="T:System.String"/> argument (<see cref="M:MvvmValidation.ValidationHelper.GetResult(System.String)"/>) 
            and invoke it with nameof(MyProperty) instead. 
            </summary>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.Validate(System.String)">
            <summary>
            Validates (executes validation rules) the property specified in the <paramref name="targetName"/> parameter.
            </summary>
            <param name="targetName">Name of the property to validate. Example: Validate(nameof(MyProperty)).</param>
            <returns>Result that indicates whether the given property is valid and a collection of errors, if not valid.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.Validate(System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            OBSOLTE: If you are using C# 6 compiler consider using another overload of this method that 
            takes a <see cref="T:System.String"/> argument (<see cref="M:MvvmValidation.ValidationHelper.Validate(System.String)"/>) 
            and invoke it with nameof(MyProperty) instead. 
            </summary>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.Validate(System.Object)">
            <summary>
            Validates (executes validation rules) the specified target object.
            </summary>
            <param name="target">The target object to validate.</param>
            <returns>Result that indicates whether the given target object is valid and a collection of errors, if not valid.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.ValidateCaller(System.String)">
            <summary>
            Validates (executes validation rules) the calling property.
            </summary>
            <param name="callerName">Name of the property to validate (provided by the c# compiler and should not be specified exlicitly).</param>
            <returns>Result that indicates whether the given property is valid and a collection of errors, if not valid.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.ValidateAll">
            <summary>
            Executes validation using all validation rules. 
            </summary>
            <returns>Result that indicates whether the validation was succesfull and a collection of errors, if it wasn't.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.ValidateAsync(System.String)">
            <summary>
            Executes validation for the given property asynchronously. 
            Executes all (normal and async) validation rules for the property specified in the <paramref name="targetName"/>.
            </summary>
            <param name="targetName">Expression for the property to validate. Example: ValidateAsync(() => MyProperty, ...).</param>
            <returns>Task that represents the validation operation.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.ValidateAsync(System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            OBSOLTE: If you are using C# 6 compiler consider using another overload of this method that 
            takes a <see cref="T:System.String"/> argument (<see cref="M:MvvmValidation.ValidationHelper.ValidateAsync(System.String)"/>) 
            and invoke it with nameof(MyProperty) instead. 
            </summary>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.ValidateCallerAsync(System.String)">
            <summary>
            Executes validation for the calling property asynchronously.
            </summary>
            <param name="callerName">Name of the property to validate (provided by the c# compiler and should not be specified exlicitly).</param>
            <returns>Result that indicates whether the given property is valid and a collection of errors, if not valid.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.ValidateAsync(System.Object)">
            <summary>
            Executes validation for the given target asynchronously. 
            Executes all (normal and async) validation rules for the target object specified in the <paramref name="target"/>.
            </summary>
            <param name="target">The target object to validate.</param>
            <returns>Task that represents the validation operation.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.ValidateAllAsync">
            <summary>
            Executes validation using all validation rules asynchronously.
            </summary>
            <returns>Task that represents the validation operation.</returns>
        </member>
        <member name="E:MvvmValidation.ValidationHelper.ResultChanged">
            <summary>
            Occurs when the validation result have changed for a property or for the entire entity (the result that is returned by the <see cref="M:MvvmValidation.ValidationHelper.GetResult"/> method).
            </summary>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.SuppressValidation">
            <summary>
            Suppresses all the calls to the Validate* methods until the returned <see cref="T:System.IDisposable"/> is disposed
            by calling <see cref="M:System.IDisposable.Dispose"/>. 
            </summary>
            <remarks>
            This method is convenient to use when you want to suppress validation when setting initial value to a property. In this case you would
            wrap the code that sets the property into a <c>using</c> block. Like this:
            <code>
            using (Validation.SuppressValidation()) 
            {
                MyProperty = "Initial Value";
            }
            </code>
            </remarks>
            <returns>An instance of <see cref="T:System.IDisposable"/> that serves as a handle that you can call <see cref="M:System.IDisposable.Dispose"/> on to resume validation. The value can also be used in a <c>using</c> block.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.Reset">
            <summary>
            Resets the validation state. If there were any broken rules 
            then the targets for those rules will become valid again and the <see cref="E:MvvmValidation.ValidationHelper.ResultChanged"/> event will be rised.
            </summary>
        </member>
        <member name="T:MvvmValidation.ValidationHelperExtensions">
            <summary>
            Contains extensions methods for <see cref="T:MvvmValidation.ValidationHelper"/>.
            </summary>
        </member>
        <member name="M:MvvmValidation.ValidationHelperExtensions.AddRequiredRule(MvvmValidation.ValidationHelper,System.Linq.Expressions.Expression{System.Func{System.Object}},System.String)">
            <summary>
            Adds a rule that checks that the property represented by <paramref name="propertyExpression"/> is not
            null or empty string. 
            </summary>
            <param name="validator">An instance of <see cref="T:MvvmValidation.ValidationHelper"/> that is used for validation.</param>
            <param name="propertyExpression">Expression that specifies the property to validate. Example: Validate(() => MyProperty).</param>
            <param name="errorMessage">Error message in case if the property is null or empty.</param>
            <returns>An instance of <see cref="T:MvvmValidation.IValidationRule"/> that represents the newly created validation rule.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelperExtensions.AddChildValidatable(MvvmValidation.ValidationHelper,System.Linq.Expressions.Expression{System.Func{MvvmValidation.IValidatable}})">
            <summary>
            Creates a validation rule that validates the specified child <see cref="T:MvvmValidation.IValidatable"/> object and adds errors
            to this object if invalid.
            </summary>
            <param name="validator">An instance of <see cref="T:MvvmValidation.ValidationHelper"/> that is used for validation.</param>
            <param name="childValidatableGetter">Expression for getting the <see cref="T:MvvmValidation.IValidatable"/> object to add as child.</param>
            <returns>An instance of <see cref="T:MvvmValidation.IValidationRule"/> that represents the newly created validation rule.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelperExtensions.AddChildValidatableCollection(MvvmValidation.ValidationHelper,System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.IEnumerable{MvvmValidation.IValidatable}}})">
            <summary>
            Creates a validation rule that validates all the <see cref="T:MvvmValidation.IValidatable"/> items in the collection specified in <paramref name="validatableCollectionGetter"/>
            and adds error to this object from all the validatable items in invalid.
            </summary>
            <param name="validator">An instance of <see cref="T:MvvmValidation.ValidationHelper"/> that is used for validation.</param>
            <param name="validatableCollectionGetter">Expression for getting the collection of <see cref="T:MvvmValidation.IValidatable"/> objects to add as child items.</param>
            <returns>An instance of <see cref="T:MvvmValidation.IValidationRule"/> that represents the newly created validation rule.</returns>
        </member>
        <member name="T:MvvmValidation.ValidationResult">
            <summary>
            Encapsulates result of a validation. Contains a boolean <see cref="P:MvvmValidation.ValidationResult.IsValid"/> and a collection of errors <see cref="P:MvvmValidation.ValidationResult.ErrorList"/>.
            </summary>
        </member>
        <member name="P:MvvmValidation.ValidationResult.ErrorList">
            <summary>
            Gets the list of errors if any. If valid, returns an empty collection.
            </summary>
        </member>
        <member name="P:MvvmValidation.ValidationResult.IsValid">
            <summary>
            Gets a value indicating whether the validation was sucessful. If not, see <see cref="P:MvvmValidation.ValidationResult.ErrorList"/> for the list of errors.
            </summary>
        </member>
        <member name="P:MvvmValidation.ValidationResult.Item(System.Object)">
            <summary>
            Gets an error by <paramref name="target"/>, or <c>null</c> if valid.
            </summary>
        </member>
        <member name="M:MvvmValidation.ValidationResult.ToString(MvvmValidation.IValidationResultFormatter)">
            <summary>
            Formats this instance to a string using given <see cref="T:MvvmValidation.IValidationResultFormatter"/>.
            </summary>
            <param name="formatter">The formatter that can format the validation result.</param>
            <returns>
            A string that represents this validation result.
            </returns>
        </member>
        <member name="M:MvvmValidation.ValidationResult.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:MvvmValidation.ValidationResultChangedEventArgs">
            <summary>
            Contains arguments for the <see cref="E:MvvmValidation.ValidationHelper.ResultChanged"/> event.
            </summary>
        </member>
        <member name="P:MvvmValidation.ValidationResultChangedEventArgs.Target">
            <summary>
            Gets the target, for which the validation result has changed.
            </summary>
        </member>
        <member name="P:MvvmValidation.ValidationResultChangedEventArgs.NewResult">
            <summary>
            Gets the new validation result.
            </summary>
        </member>
        <member name="T:MvvmValidation.ValidationResultExtensions">
            <summary>
            Contains helper extension methods for working with <see cref="T:MvvmValidation.ValidationResult"/>.
            </summary>
        </member>
        <member name="M:MvvmValidation.ValidationResultExtensions.Combine(MvvmValidation.ValidationResult,MvvmValidation.ValidationResult)">
            <summary>
            Merges <paramref name="firstResult"/> with given <paramref name="secondResult"/> and returns a new instance of <see cref="T:MvvmValidation.ValidationResult"/>
            that represents the merged result (the result that contains errors from both results whithout duplicates).
            </summary>
            <param name="firstResult">The first validation result to merge.</param>
            <param name="secondResult">The second validation result to merge.</param>
            <returns>A new instance of <see cref="T:MvvmValidation.ValidationResult"/> that represents the merged result (the result that contains errors from both results whithout duplicates).</returns>
        </member>
        <member name="T:MvvmValidation.ValidationRuleSettings">
            <summary>
            Represents validation rule settings that control the rule behavior.
            </summary>
        </member>
        <member name="P:MvvmValidation.ValidationRuleSettings.ExecuteOnAlreadyInvalidTarget">
            <summary>
            When set (not null), determines whether the rule should be executed whan the target is already invalid after executing previous rule(s). 
            If not set (null), the default behavior applies - to skip the rule.
            </summary>
        </member>
        <member name="T:MvvmValidation.ValidationScope">
            <summary>
            Provides a possibility to comibine multiple instances of <see cref="T:MvvmValidation.ValidationHelper"/> into one scope and 
            execute the validation in one go with multiple validators. Useful when validating multiple view models that are
            not aware of each other and know only about the scope. 
            </summary>
        </member>
        <member name="E:MvvmValidation.ValidationScope.ResultChanged">
            <summary>
            Occurs when validation result changes.
            </summary>
        </member>
        <member name="M:MvvmValidation.ValidationScope.RegisterValidator(MvvmValidation.ValidationHelper)">
            <summary>
            Registers a validator with this scope. 
            </summary>
            <param name="validator">Validator to register.</param>
        </member>
        <member name="M:MvvmValidation.ValidationScope.ValidateAllAsync">
            <summary>
            Executes the validation of all registered validators and combines the result from all of them.
            </summary>
            <returns>The validation result.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationScope.GetResult">
            <summary>
            Gets the result of last validation (without executing the validation).
            </summary>
            <returns>The result of last validation.</returns>
        </member>
        <member name="T:MvvmValidation.ValidationSettings">
            <summary>
            Contains settings that control the behavior of a particular instance of <see cref="T:MvvmValidation.ValidationHelper"/>.
            </summary>
        </member>
        <member name="P:MvvmValidation.ValidationSettings.DefaultRuleSettings">
            <summary>
            When specified, overrides the default validation rule settings for all rules (each rule can still specify its own settings during registration). 
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage.
            </summary>
            <example><code>
            [CanBeNull] object Test() => null;
            
            void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>.
            </summary>
            <example><code>
            [NotNull] object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.ItemNotNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can never be null.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ItemCanBeNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can be null.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitNotNullAttribute">
            <summary>
            Implicitly apply [NotNull]/[ItemNotNull] annotation to all the of type members and parameters
            in particular scope where this annotation is used (type declaration or whole assembly).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form.
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            void ShowError(string message, params object[] args) { /* do something */ }
            
            void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:JetBrains.Annotations.ValueProviderAttribute">
            <summary>
            For a parameter that is expected to be one of the limited set of values.
            Specify fields of which type should be used as values for this parameter.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <example><code>
            void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
             is used to notify that some property value changed.
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
             
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               string _name;
             
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output.
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            class Foo {
              string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            
            class UsesNoEquality {
              void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            class ComponentAttribute : Attribute { }
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes
            as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type.</summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used.</summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
            </summary>
            <example><code>
            [Pure] int Multiply(int x, int y) => x * y;
            
            void M() {
              Multiply(123, 42); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.MustUseReturnValueAttribute">
            <summary>
            Indicates that the return value of method invocation must be used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ProvidesContextAttribute">
            <summary>
            Indicates the type member or parameter of some type, that should be used instead of all other ways
            to get the value that type. This annotation is useful when you have some "context" value evaluated
            and stored somewhere, meaning that all other ways to get this value must be consolidated with existing one.
            </summary>
            <example><code>
            class Foo {
              [ProvidesContext] IBarService _barService = ...;
            
              void ProcessNode(INode node) {
                DoSomething(node, node.GetGlobalServices().Bar);
                //              ^ Warning: use value of '_barService' field
              }
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.SourceTemplateAttribute">
            <summary>
            An extension method marked with this attribute is processed by ReSharper code completion
            as a 'Source Template'. When extension method is completed over some expression, it's source code
            is automatically expanded like a template at call site.
            </summary>
            <remarks>
            Template method body can contain valid source code and/or special comments starting with '$'.
            Text inside these comments is added as source code when the template is applied. Template parameters
            can be used either as additional method parameters or as identifiers wrapped in two '$' signs.
            Use the <see cref="T:JetBrains.Annotations.MacroAttribute"/> attribute to specify macros for parameters.
            </remarks>
            <example>
            In this example, the 'forEach' method is a source template available over all values
            of enumerable types, producing ordinary C# 'foreach' statement and placing caret inside block:
            <code>
            [SourceTemplate]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; xs) {
              foreach (var x in xs) {
                 //$ $END$
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.MacroAttribute">
            <summary>
            Allows specifying a macro for a parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>.
            </summary>
            <remarks>
            You can apply the attribute on the whole method or on any of its additional parameters. The macro expression
            is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Expression"/> property. When applied on a method, the target
            template parameter is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Target"/> property. To apply the macro silently
            for the parameter, set the <see cref="P:JetBrains.Annotations.MacroAttribute.Editable"/> property value = -1.
            </remarks>
            <example>
            Applying the attribute on a source template method:
            <code>
            [SourceTemplate, Macro(Target = "item", Expression = "suggestVariableName()")]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; collection) {
              foreach (var item in collection) {
                //$ $END$
              }
            }
            </code>
            Applying the attribute on a template method parameter:
            <code>
            [SourceTemplate]
            public static void something(this Entity x, [Macro(Expression = "guid()", Editable = -1)] string newguid) {
              /*$ var $x$Id = "$newguid$" + x.ToString();
              x.DoSomething($x$Id); */
            }
            </code>
            </example>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Expression">
            <summary>
            Allows specifying a macro that will be executed for a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>
            parameter when the template is expanded.
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Editable">
            <summary>
            Allows specifying which occurrence of the target parameter becomes editable when the template is deployed.
            </summary>
            <remarks>
            If the target parameter is used several times in the template, only one occurrence becomes editable;
            other occurrences are changed synchronously. To specify the zero-based index of the editable occurrence,
            use values >= 0. To make the parameter non-editable when the template is expanded, use -1.
            </remarks>>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Target">
            <summary>
            Identifies the target parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see> if the
            <see cref="T:JetBrains.Annotations.MacroAttribute"/> is applied on a template method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
            an MVC controller. If applied to a method, the MVC controller name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
            partial view. If applied to a method, the MVC partial view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcSuppressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component name.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component view. If applied to a method, the MVC view component view name is default.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name.
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CollectionAccessAttribute">
            <summary>
            Indicates how method, constructor invocation or property access
            over collection type affects content of the collection.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection.</summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if
            one of the conditions is satisfied. To set the condition, mark one of the parameters with 
            <see cref="T:JetBrains.Annotations.AssertionConditionAttribute"/> attribute.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. The method itself should be
            marked by <see cref="T:JetBrains.Annotations.AssertionMethodAttribute"/> attribute. The mandatory argument of
            the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition,
            then the execution continues. Otherwise, execution is assumed to be halted.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value.</summary>
        </member>
        <member name="T:JetBrains.Annotations.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.LinqTunnelAttribute">
            <summary>
            Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
            .Where). This annotation allows inference of [InstantHandle] annotation for parameters
            of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.RegexPatternAttribute">
            <summary>
            Indicates that parameter is regular expression pattern.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be treated
            as <c>ItemsControl</c>-derived type, to enable inner items <c>DataContext</c> type resolve.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemBindingOfItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the property of some <c>BindingBase</c>-derived type, that
            is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
            enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
            Property should have the tree ancestor of the <c>ItemsControl</c> type or
            marked with the <see cref="T:JetBrains.Annotations.XamlItemsControlAttribute"/> attribute.
            </remarks>
        </member>
        <member name="T:JetBrains.Annotations.NoReorder">
            <summary>
            Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
            The attribute must be mentioned in your member reordering patterns
            </remarks>
        </member>
    </members>
</doc>
